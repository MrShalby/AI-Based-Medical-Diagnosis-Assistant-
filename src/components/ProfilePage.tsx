import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { 
  Download, 
  User, 
  Lock, 
  Edit2, 
  Save, 
  X, 
  Camera, 
  FileText, 
  Calendar, 
  BarChart2 
} from 'lucide-react';
import { DiagnosisReport, getUserReports } from '../services/reports';

interface ProfileForm {
  name: string;
  oldPassword: string;
  newPassword: string;
  confirmPassword: string;
}

const ProfilePage: React.FC = () => {
  const { user, updateUserProfile } = useAuth();
  const [reports, setReports] = React.useState<DiagnosisReport[]>([]);
  const [isEditingName, setIsEditingName] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const [form, setForm] = useState<ProfileForm>({
    name: user?.name || '',
    oldPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  React.useEffect(() => {
    const fetchReports = async () => {
      try {
        const data = await getUserReports();
        setReports(data);
      } catch (error) {
        console.error('Error fetching reports:', error);
      }
    };

    fetchReports();
  }, []);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfileImage(reader.result as string);
        // TODO: Upload to backend
      };
      reader.readAsDataURL(file);
    }
  };

  const handleNameSubmit = async () => {
    try {
      setLoading(true);
      setError(null);
      // TODO: Call backend API to update name
      await updateUserProfile({ name: form.name });
      setIsEditingName(false);
      setSuccess('Name updated successfully!');
      setTimeout(() => setSuccess(null), 3000);
    } catch  {
      setError('Failed to update name');
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordSubmit = async () => {
    if (form.newPassword !== form.confirmPassword) {
      setError('New passwords do not match');
      return;
    }
    try {
      setLoading(true);
      setError(null);
      // TODO: Call backend API to update password
      await updateUserProfile({ 
        oldPassword: form.oldPassword,
        newPassword: form.newPassword 
      });
      setIsChangingPassword(false);
      setForm(prev => ({ ...prev, oldPassword: '', newPassword: '', confirmPassword: '' }));
      setSuccess('Password updated successfully!');
      setTimeout(() => setSuccess(null), 3000);
    } catch  {
      setError('Failed to update password');
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadReport = (report: DiagnosisReport) => {
    const reportContent = `
Medical Diagnosis Report
======================
Date: ${report.date}
Patient: ${user?.name}

Symptoms:
${report.symptoms.map(s => `- ${s}`).join('\n')}

Primary Diagnosis:
${report.diagnosis}
Confidence Level: ${(report.probability * 100).toFixed(2)}%

Detailed Analysis:
${report.details.predictions.map(p => `
â€¢ ${p.disease}
  Confidence: ${p.confidence.toFixed(2)}%
  ${p.description}
`).join('\n')}

Recommendations:
${report.details.recommendations.map(r => `
${r.type}:
${r.advice}
`).join('\n')}

Generated by AI Medical Diagnosis Assistant
This report is for informational purposes only.
Please consult with a healthcare professional for medical advice.
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical-report-${report.date}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      {(error || success) && (
        <div className={`mb-4 p-4 rounded-lg ${error ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
          {error || success}
        </div>
      )}

      {/* Profile Header */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        <div className="relative h-32 bg-gradient-to-r from-blue-500 to-blue-600">
          <div className="absolute -bottom-16 left-8">
            <div className="relative">
              <div className="w-32 h-32 rounded-full border-4 border-white dark:border-gray-800 overflow-hidden bg-gray-200">
                {profileImage ? (
                  <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                ) : (
                  <User className="w-full h-full p-4 text-gray-400" />
                )}
              </div>
              <label className="absolute bottom-0 right-0 p-2 bg-blue-500 rounded-full cursor-pointer hover:bg-blue-600 transition-colors">
                <Camera className="h-5 w-5 text-white" />
                <input type="file" className="hidden" onChange={handleImageUpload} accept="image/*" />
              </label>
            </div>
          </div>
        </div>

        <div className="pt-20 pb-6 px-8">
          <div className="flex items-center justify-between">
            <div>
              {isEditingName ? (
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={form.name}
                    onChange={(e) => setForm(prev => ({ ...prev, name: e.target.value }))}
                    className="px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                    placeholder="Enter new name"
                  />
                  <button
                    onClick={handleNameSubmit}
                    disabled={loading}
                    className="p-2 text-green-500 hover:text-green-600"
                  >
                    <Save className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => setIsEditingName(false)}
                    className="p-2 text-red-500 hover:text-red-600"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                    {user?.name}
                  </h1>
                  <button
                    onClick={() => setIsEditingName(true)}
                    className="p-1 text-gray-500 hover:text-blue-500"
                  >
                    <Edit2 className="h-4 w-4" />
                  </button>
                </div>
              )}
              <p className="text-gray-500 dark:text-gray-400">{user?.email}</p>
            </div>
            
            <button
              onClick={() => setIsChangingPassword(!isChangingPassword)}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <Lock className="h-4 w-4" />
              <span>Change Password</span>
            </button>
          </div>

          {/* Password Change Form */}
          {isChangingPassword && (
            <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">Change Password</h3>
              <div className="space-y-4">
                <input
                  type="password"
                  placeholder="Current Password"
                  value={form.oldPassword}
                  onChange={(e) => setForm(prev => ({ ...prev, oldPassword: e.target.value }))}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                />
                <input
                  type="password"
                  placeholder="New Password"
                  value={form.newPassword}
                  onChange={(e) => setForm(prev => ({ ...prev, newPassword: e.target.value }))}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                />
                <input
                  type="password"
                  placeholder="Confirm New Password"
                  value={form.confirmPassword}
                  onChange={(e) => setForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
                />
                <div className="flex justify-end space-x-2">
                  <button
                    onClick={() => {
                      setIsChangingPassword(false);
                      setForm(prev => ({ ...prev, oldPassword: '', newPassword: '', confirmPassword: '' }));
                    }}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handlePasswordSubmit}
                    disabled={loading}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
                  >
                    Update Password
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Reports Section */}
      <div className="mt-8">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2">
              <FileText className="h-6 w-6 text-blue-500" />
              <span>Medical Reports</span>
            </h2>
          </div>

          {reports.length === 0 ? (
            <div className="text-center py-8">
              <FileText className="h-12 w-12 mx-auto text-gray-400 mb-3" />
              <p className="text-gray-500 dark:text-gray-400">No diagnosis reports yet.</p>
              <p className="text-sm text-gray-400 dark:text-gray-500 mt-1">
                Reports will appear here after you get a diagnosis.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => (
                <div
                  key={report.id}
                  className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:shadow-md transition-shadow"
                >
                  <div className="flex items-start space-x-4">
                    <div className="flex-shrink-0">
                      <div className="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                        <BarChart2 className="h-5 w-5 text-blue-500 dark:text-blue-400" />
                      </div>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900 dark:text-white">
                        {report.diagnosis}
                      </h4>
                      <div className="mt-1 flex items-center space-x-2">
                        <Calendar className="h-4 w-4 text-gray-400" />
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {new Date(report.date).toLocaleDateString()}
                        </span>
                      </div>
                      <div className="mt-2">
                        <div className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          {(report.probability * 100).toFixed(1)}% confidence
                        </div>
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={() => handleDownloadReport(report)}
                    className="flex items-center space-x-2 px-4 py-2 text-blue-500 hover:text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-lg transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download</span>
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;
